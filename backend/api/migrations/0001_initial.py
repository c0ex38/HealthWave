# Generated by Django 5.2.3 on 2025-07-02 22:45

import api.models
import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Frequency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Frekans adı', max_length=100)),
                ('frequency_hz', models.FloatField(help_text='Frekans değeri (Hz)', validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(1000.0)])),
                ('category', models.CharField(help_text='Kategori (Stres, Uyku, vs.)', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Frekansın etkisi ve açıklaması', null=True)),
                ('scientific_reference', models.TextField(blank=True, help_text='Bilimsel kaynak', null=True)),
                ('audio_file', models.FileField(blank=True, help_text='Frekansın ses dosyası (ör. .mp3, .wav)', null=True, upload_to='frequencies/')),
                ('usage_count', models.PositiveIntegerField(default=0, help_text='Kullanım sayısı')),
                ('is_active', models.BooleanField(default=True, help_text='Aktif frekans')),
            ],
            options={
                'verbose_name': 'Frekans',
                'verbose_name_plural': 'Frekanslar',
                'ordering': ['category', 'frequency_hz'],
            },
        ),
        migrations.CreateModel(
            name='ChatbotLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_message', models.TextField(help_text='Kullanıcının yazdığı mesaj')),
                ('bot_response', models.TextField(help_text="Chatbot'un cevabı")),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Mesaj oluşturulma zamanı')),
                ('message_type', models.CharField(choices=[('question', 'Soru'), ('complaint', 'Şikayet'), ('request', 'İstek'), ('feedback', 'Geri Bildirim'), ('general', 'Genel')], default='general', help_text='Mesaj türü', max_length=20)),
                ('user_rating', models.IntegerField(blank=True, help_text='Kullanıcının yanıt için verdiği puan (1-5 yıldız)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('is_helpful', models.BooleanField(blank=True, help_text='Yanıt yardımcı oldu mu?', null=True)),
                ('response_time_seconds', models.FloatField(default=0.0, help_text="Chatbot'un yanıt süresi (saniye cinsinden)")),
                ('user', models.ForeignKey(help_text='Mesajı gönderen kullanıcı', on_delete=django.db.models.deletion.CASCADE, related_name='chatbot_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Chatbot Mesajı',
                'verbose_name_plural': 'Chatbot Mesajları',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PDFReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Rapor başlığı', max_length=200)),
                ('description', models.TextField(blank=True, help_text='Rapor açıklaması / içeriği hakkında bilgi', null=True)),
                ('file', models.FileField(blank=True, help_text='Yüklenen PDF dosyası', null=True, upload_to=api.models.report_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Rapor oluşturulma tarihi')),
                ('file_size', models.PositiveIntegerField(default=0, help_text='Dosya boyutu (bytes cinsinden)')),
                ('download_count', models.PositiveIntegerField(default=0, help_text='Raporun indirilme sayısı')),
                ('is_active', models.BooleanField(default=True, help_text='Rapor aktif mi?')),
                ('user', models.ForeignKey(help_text='Raporu oluşturan kullanıcı', on_delete=django.db.models.deletion.CASCADE, related_name='pdf_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'PDF Raporu',
                'verbose_name_plural': 'PDF Raporları',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('listened_at', models.DateTimeField(auto_now_add=True, help_text='Oturumun başladığı zaman')),
                ('duration_seconds', models.IntegerField(help_text='Dinleme süresi (saniye cinsinden)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(7200)])),
                ('completed', models.BooleanField(default=True, help_text='Oturum tamamlandı mı?')),
                ('rating', models.IntegerField(blank=True, help_text='Oturum puanı (1-5 yıldız)', null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('frequency', models.ForeignKey(help_text='Dinlenen frekans', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='api.frequency')),
                ('user', models.ForeignKey(help_text='Oturumu gerçekleştiren kullanıcı', on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dinleme Oturumu',
                'verbose_name_plural': 'Dinleme Oturumları',
                'ordering': ['-listened_at'],
            },
        ),
        migrations.CreateModel(
            name='DailyLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, help_text='Kayıt tarihi')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Oluşturulma zamanı (API uyumluluğu için)')),
                ('note', models.TextField(blank=True, help_text='Günlük notlar / açıklamalar', null=True)),
                ('stress', models.IntegerField(help_text='Stres seviyesi (1-10 arası)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('sleep_duration', models.FloatField(help_text='Uyku süresi (saat cinsinden)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(24.0)])),
                ('restfulness', models.IntegerField(help_text='Dinlenmişlik seviyesi (1-10 arası)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('pulse', models.IntegerField(help_text='Nabız (bpm)', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(220)])),
                ('focus', models.IntegerField(help_text='Odaklanma seviyesi (1-10 arası)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('mood', models.CharField(blank=True, help_text='Ruh durumu (örn. mutlu, kaygılı, yorgun)', max_length=200, null=True)),
                ('physical_activity', models.TextField(blank=True, help_text='Fiziksel aktivite (ör. yürüyüş, spor, yoga)', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='daily_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Günlük Kayıt',
                'verbose_name_plural': 'Günlük Kayıtlar',
                'ordering': ['-date'],
                'unique_together': {('user', 'date')},
            },
        ),
    ]
